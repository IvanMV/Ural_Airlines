1. Дана строка, которая содержит латинские буквы, цифры, пробелы и символы скобок.
Удалите из строки текст, заключённый в скобки.
Напишите вариант с использованием регулярных выражений и без них.
Например:
    "asdflj (kla (inner) asd) port (another ))(unclosed" -> "asdflj port )(unclosed"

РЕШЕНИЕ
# Удаление из строки текста, заключенного в скобки с использованием regex
import re
def remove_by_re(string):
    pattern = r'\([^()]*\)'
    while re.search(pattern, string):
        string = re.sub(pattern, '', string)
    return string

# Удаление из строки текста, заключенного в скобки без использования regex
def remove_manual(string):
    found = 0
    while found > -1:
        right = string.find(')', found + 1)
        if right > -1:
            left = string.rfind('(', 0, right)
            if left > -1:
                string = string[:left] + string[right+1:]
                found = left - 1
            else:
                found = right
        else:
            return string
------------------------------------------------------------------------------------------------------------------------------
2. Даны несколько кортежей с целыми числами.
Напишите функцию [1], которая принимает на вход неограниченное число одномерных кортежей разной длинны с целыми числами.
Результатом функции должен быть список кортежей, в каждом из которых:
значение 1 - значения входных кортежей по порядку
значение 2 - значение 1, возведенное в степень значения 1
Например: 
    (1, 1), (2, 3), (2,), (2,) -> [(1, 1), (1, 1), (2, 4), (3, 27), (2, 4), (2, 4)]

РЕШЕНИЕ
def exponent(*args):
    return [(x, x**x) for item in args if isinstance(item, tuple) for x in item]
  
------------------------------------------------------------------------------------------------------------------------------
3. Напишите функцию [2], которая принимает на вход результат функции [1].
Результатом функции должен быть список из вторых элементов входных кортежей. Удалите повторяющиеся значения, следующие друг за другом.
Например: 
    [(1, 1), (1, 1), (2, 4), (3, 27), (2, 4), (2, 4)] -> [1, 4, 27, 4]

РЕШЕНИЕ
def second_elements(func, args):
    result = []
    for _, second in func(*args):
        if not result or second != result[-1]:
            result.append(second)
    return result
  
------------------------------------------------------------------------------------------------------------------------------
4. Напишите юнит-тесты для проверки написанного кода. Если это возможно, приведите примеры оптимизации написанных функции для уменьшения накладных расходов.

РЕШЕНИЕ
import unittest
from tasks import remove_by_re, remove_manual, exponent, second_elements

class TestRemoveByRegex(unittest.TestCase):
    def test_remove_single(self):
        input_str = "This is (a test) string."
        expected_result = "This is  string."
        self.assertEqual(remove_by_re(input_str), expected_result)

    def test_remove_nested(self):
        input_str = "Example (with (nested) expression 25478)."
        expected_result = "Example ."
        self.assertEqual(remove_by_re(input_str), expected_result)

    def test_remove_multiple(self):
        input_str = "Example (inside) multiple (pairs) of (somedata 7233)."
        expected_result = "Example  multiple  of ."
        self.assertEqual(remove_by_re(input_str), expected_result)
        
    def test_remove_with_unclosed(self):
        input_str = "asdflj (kla (inner) asd) port (another ))(unclosed"
        expected_result = "asdflj  port )(unclosed"
        self.assertEqual(remove_by_re(input_str), expected_result)
        
        
class TestRemoveByManual(unittest.TestCase):
    def test_remove_single(self):
        input_str = "This is (a test) string."
        expected_result = "This is  string."
        self.assertEqual(remove_manual(input_str), expected_result)

    def test_remove_nested(self):
        input_str = "Example (with (nested) expression 25478)."
        expected_result = "Example ."
        self.assertEqual(remove_manual(input_str), expected_result)

    def test_remove_multiple(self):
        input_str = "Example (inside) multiple (pairs) of (somedata 7233)."
        expected_result = "Example  multiple  of ."
        self.assertEqual(remove_manual(input_str), expected_result)
        
    def test_remove_with_unclosed(self):
        input_str = "asdflj (kla (inner) asd) port (another ))(unclosed"
        expected_result = "asdflj  port )(unclosed"
        self.assertEqual(remove_manual(input_str), expected_result)


class TestExponentFunction(unittest.TestCase):
    def test_single_tuple(self):
        # Проверка для одного кортежа
        result = exponent((2, 3, 4))
        self.assertEqual(result, [(2, 4), (3, 27), (4, 256)])

    def test_multiple_tuples(self):
        # Проверка для нескольких кортежей
        result = exponent((1, 1), (2, 3), (2,), (2,))
        self.assertEqual(result, [(1, 1), (1, 1), (2, 4), (3, 27), (2, 4), (2, 4)])

    def test_empty_and_single_elem_tuples(self):
        # Проверка для пустых кортежей и кортежей с одним элементом
        result = exponent((), (1,), ())
        self.assertEqual(result, [(1, 1)])

    def test_non_tuple_args(self):
        # Проверка для аргументов, которые не являются кортежами
        result = exponent(2, 3, 4)
        self.assertEqual(result, [])
        
        
class TestSecondElementsFunction(unittest.TestCase):
    def test_single_tuple(self):
        # Проверка для одного кортежа
        result = second_elements(exponent, ((2, 3, 4),))
        self.assertEqual(result, [4, 27, 256])

    def test_multiple_tuples(self):
        # Проверка для нескольких кортежей
        result = second_elements(exponent, ((2, 3), (1, 2, 3)))
        self.assertEqual(result, [4, 27, 1, 4, 27])

    def test_empty_tuples(self):
        # Проверка для пустых кортежей и кортежей с одним элементом
        result = second_elements(exponent, ((), (1,), ()))
        self.assertEqual(result, [1])

    def test_repeating_values(self):
        # Проверка с повторяющимися значениями
        result = second_elements(exponent, ((1, 1), (2, 3), (2,), (2,)))
        self.assertEqual(result, [1, 4, 27, 4])


if __name__ == '__main__':
    unittest.main()
------------------------------------------------------------------------------------------------------------------------------
5. Решите задачу
Дорожки в аэропорту:
Вы находитесь в аэропорту в точке 0. Коридор длиной X ведёт к выходу на посадку в самолёт.
В коридоре есть движущиеся дорожки, каждая из которых двигается с некоторой скоростью Wi.
Вы идёте по ним со скоростью Wi + <ваша скорость>.
Дорожки не пересекаются: в любом месте коридора есть только одна дорожка; но они могут следовать друг за другом.
Ваша нормальная скорость - S. Но, так как до вылета осталось уже не много, вы можете немного пробежаться со скоростью R, максимум t секунд.
При этом, можно как пробежаться 1 раз, так и разбить время t на интервалы.
За какое минимальное время Вы сможете добраться до выхода на посадку?

Входные параметры
Текстовый файл.
Первая строка содержит пять натуральных чисел:
X - длина коридора в метрах (м)
S - скорость ходьбы, метры в секунду (м/с)
R - скорость бега (м/с)
t - максимальное время пробежки, секунды (с)
N - число дорожек
Следующие N строк содержат три натуральных числа:
Bi - начало дорожки (м)
Ei - конец дорожки (м)
Wi - скорость движения дорожки(м/с)

Ограничения:
1 ≤ S < R ≤ 100
1 ≤ wi ≤ 100
0 ≤ Bi < Ei ≤ X
Ei ≤ Bi+1
1 ≤ t ≤ 100
1 ≤ X ≤ 100
1 ≤ N ≤ 20

Вывод программы:
Минимальное число секунд необходимое чтобы добраться до выхода на посадку.
Допустимая погрешность:
 - 10^-6.

РЕШЕНИЕ
# Считываем значения из файла
with open('input.txt', 'r') as f:
    n = None
    paths = []
    for line in f:
        if not n:
            x, s, r, t, n = map(float, line.split())
        else:
            temp = tuple(map(float, line.split()))
            paths.append(temp)


# Упорядочим дорожки
paths.sort(key=lambda x: x[0])


# Создаем отрезки без дорожек
def fill_gaps(paths, x):
    result = []
    current_end = 0.0

    for start, end, _ in paths:
        if start > current_end:
            result.append((current_end, start, 0.0))
        current_end = max(current_end, end)
    
    if current_end < x:
        result.append((current_end, x, 0.0))
    return result
filled_paths = fill_gaps(paths, x)


# Объединяем все отрезки с сортировкой
combined_list = paths + filled_paths
combined_list.sort(key=lambda x: (x[2], x[0]))


# Подсчет общего времени на весь путь
result = 0.0 # Общее время в пути
for item in combined_list:
    if t > 0:
        v = item[2] + r # Общая скорость движения при беге
        run_x = v * t # Путь который мы можем пробежать с учетом добавленной скорости
        item_x = item[1] - item[0] # Путь отрезка
        if run_x >= item_x:
            item_t = item_x / v # Время на бег данного отрезка
            t -= item_t # Остаток времени бега
            result += item_t
        else:
            item_t = t
            t = 0
            walk_x = item_x - run_x # Остаток отрезка для прохождения пешком
            walk_v = item[2] + s # Скорость с учетом добавочной
            walk_t = walk_x / walk_v # Время прохождения остатка отрезка пешком
            result += (item_t + walk_t)
    else:
        item_x = item[1] - item[0] # Путь отрезка
        walk_v = item[2] + s # Скорость с учетом добавочной
        walk_t = item_x / walk_v # Время прохождения отрезка пешком
        result += walk_t

formatted_total = "{:.6f}".format(result)
print(formatted_total)

